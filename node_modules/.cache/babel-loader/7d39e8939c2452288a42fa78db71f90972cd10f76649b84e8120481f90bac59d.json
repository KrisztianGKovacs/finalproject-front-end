{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nconst PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\nconst USER_ID = 'chrissmith';\nconst APP_ID = 'test';\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst IMAGE_URL = `{imageUrl}`;\ncalculateFaceLocation = data => {\n  const clarifaiFace = data.response.outputs[0].data.regions[0].region_info.bounding_box;\n  const image = document.getElementById('inputimage');\n  const width = Number(image.width);\n  const height = Number(image.height);\n  console.log(width, height);\n  return {\n    leftCol: clarifaiFace.left_col * width,\n    topRow: clarifaiFace.top_row * height,\n    rightCol: width - clarifaiFace.right_col * width,\n    bottomRow: height - clarifaiFace.bottom_row * height\n  };\n};\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n      }\n    }\n  }]\n});\nconst Teszt = ({\n  imageUrl\n}) => {\n  _s();\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n\n  //const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n  useEffect(() => {\n    console.log('run run run');\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text())\n    //.then(response => this.calculateFaceLocation(response))\n    .then(result => console.log(result)).catch(error => console.log('error', error));\n  }, []);\n};\n_s(Teszt, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Teszt;\nexport default Teszt;\nvar _c;\n$RefreshReg$(_c, \"Teszt\");","map":{"version":3,"names":["React","useEffect","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","calculateFaceLocation","data","clarifaiFace","response","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","raw","JSON","stringify","Teszt","imageUrl","_s","requestOptions","method","headers","body","fetch","then","text","result","catch","error","_c","$RefreshReg$"],"sources":["C:/Users/Putyi/Downloads/Tanfolyam/finalproject/finalproject/src/component/teszt/teszt.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\n\r\nconst PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\r\n    \r\n    const USER_ID = 'chrissmith';       \r\n    const APP_ID = 'test';\r\n    \r\n    const MODEL_ID = 'face-detection';\r\n    const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \r\n    \r\n    const IMAGE_URL = `{imageUrl}`;\r\n\r\n    calculateFaceLocation = (data) => {\r\n        const clarifaiFace = data.response.outputs[0].data.regions[0].region_info.bounding_box;\r\n        const image = document.getElementById('inputimage');\r\n        const width = Number(image.width);\r\n        const height = Number(image.height);\r\n        console.log(width, height);\r\n        return {\r\n           leftCol: clarifaiFace.left_col * width,\r\n           topRow: clarifaiFace.top_row * height,\r\n           rightCol: width - (clarifaiFace.right_col * width),\r\n           bottomRow: height - (clarifaiFace.bottom_row * height)\r\n        }   \r\n       }\r\n\r\nconst raw = JSON.stringify({\r\n    \"user_app_id\": {\r\n        \"user_id\": USER_ID,\r\n        \"app_id\": APP_ID\r\n    },\r\n    \"inputs\": [\r\n        {\r\n            \"data\": {\r\n                \"image\": {\r\n                    \"url\": IMAGE_URL\r\n                }\r\n            }\r\n        }\r\n    ]\r\n});\r\n\r\nconst Teszt = ( {imageUrl} ) => {\r\n    \r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Authorization': 'Key ' + PAT\r\n        },\r\n        body: raw\r\n    };\r\n\r\n    \r\n    //const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\r\n    useEffect(() => {\r\n    \r\n            console.log('run run run');\r\n            fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\r\n        .then(response => response.text())\r\n        //.then(response => this.calculateFaceLocation(response))\r\n        .then(result => console.log(result))\r\n        .catch(error => console.log('error', error))\r\n    \r\n            }, []);\r\n}\r\n\r\nexport default Teszt;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAGxC,MAAMC,GAAG,GAAG,kCAAkC;AAE1C,MAAMC,OAAO,GAAG,YAAY;AAC5B,MAAMC,MAAM,GAAG,MAAM;AAErB,MAAMC,QAAQ,GAAG,gBAAgB;AACjC,MAAMC,gBAAgB,GAAG,kCAAkC;AAE3D,MAAMC,SAAS,GAAI,YAAW;AAE9BC,qBAAqB,GAAIC,IAAI,IAAK;EAC9B,MAAMC,YAAY,GAAGD,IAAI,CAACE,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,YAAY;EACtF,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EACnD,MAAMC,KAAK,GAAGC,MAAM,CAACJ,KAAK,CAACG,KAAK,CAAC;EACjC,MAAME,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAACK,MAAM,CAAC;EACnCC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEE,MAAM,CAAC;EAC1B,OAAO;IACJG,OAAO,EAAEd,YAAY,CAACe,QAAQ,GAAGN,KAAK;IACtCO,MAAM,EAAEhB,YAAY,CAACiB,OAAO,GAAGN,MAAM;IACrCO,QAAQ,EAAET,KAAK,GAAIT,YAAY,CAACmB,SAAS,GAAGV,KAAM;IAClDW,SAAS,EAAET,MAAM,GAAIX,YAAY,CAACqB,UAAU,GAAGV;EAClD,CAAC;AACF,CAAC;AAER,MAAMW,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;EACvB,aAAa,EAAE;IACX,SAAS,EAAE/B,OAAO;IAClB,QAAQ,EAAEC;EACd,CAAC;EACD,QAAQ,EAAE,CACN;IACI,MAAM,EAAE;MACJ,OAAO,EAAE;QACL,KAAK,EAAEG;MACX;IACJ;EACJ,CAAC;AAET,CAAC,CAAC;AAEF,MAAM4B,KAAK,GAAGA,CAAE;EAACC;AAAQ,CAAC,KAAM;EAAAC,EAAA;EAG5B,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGtC;IAC9B,CAAC;IACDuC,IAAI,EAAET;EACV,CAAC;;EAGD;EACA/B,SAAS,CAAC,MAAM;IAERqB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BmB,KAAK,CAAC,qCAAqC,GAAGrC,QAAQ,GAAG,YAAY,GAAGC,gBAAgB,GAAG,UAAU,EAAEgC,cAAc,CAAC,CACzHK,IAAI,CAAChC,QAAQ,IAAIA,QAAQ,CAACiC,IAAI,CAAC,CAAC;IACjC;IAAA,CACCD,IAAI,CAACE,MAAM,IAAIvB,OAAO,CAACC,GAAG,CAACsB,MAAM,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,IAAIzB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEwB,KAAK,CAAC,CAAC;EAExC,CAAC,EAAE,EAAE,CAAC;AAClB,CAAC;AAAAV,EAAA,CAxBKF,KAAK;AAAAa,EAAA,GAALb,KAAK;AA0BX,eAAeA,KAAK;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}