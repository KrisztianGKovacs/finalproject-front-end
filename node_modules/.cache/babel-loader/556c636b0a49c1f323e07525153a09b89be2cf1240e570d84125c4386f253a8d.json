{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Putyi\\\\Downloads\\\\Tanfolyam\\\\finalproject\\\\finalproject\\\\src\\\\App.js\";\nimport React, { Component, useEffect } from 'react';\nimport './App.css';\nimport Part from './component/particles/particles';\nimport Navigation from './component/navigation/navigation';\nimport Logo from './component/logo/logo';\nimport ImageLinkForm from './component/imagelinkform/imagelinkform';\nimport Rank from './component/rank/rank';\nimport FaceRecognize from './component/facerecognize/facerecognize';\n\n//import Teszt from './component/teszt/teszt';\n\n/*const PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\n\nconst USER_ID = 'chrissmith';       \nconst APP_ID = 'test';\n\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n\n//const IMAGE_URL = `{this.state.imageUrl}`;\n\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n\nconst raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                }\n            }\n        }\n    ]\n});\n \nconst requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.text())\n    //.then(response => this.calculateFaceLocation(response))\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error))*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    var _s = $RefreshSig$();\n    super();\n    this.Teszt = _s(() => {\n      _s();\n      const PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\n      const USER_ID = 'chrissmith';\n      const APP_ID = 'test';\n      const MODEL_ID = 'face-detection';\n      const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n      const IMAGE_URL = `{imageUrl}`;\n\n      //const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n      useEffect(() => {\n        const raw = JSON.stringify({\n          \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n          },\n          \"inputs\": [{\n            \"data\": {\n              \"image\": {\n                \"url\": IMAGE_URL\n              }\n            }\n          }]\n        });\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n          },\n          body: raw\n        };\n      }, []);\n      return fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text()).then(response => this.calculateFaceLocation(response)).then(result => console.log(result)).catch(error => console.log('error', error));\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.response.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Part, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognize, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","useEffect","Part","Navigation","Logo","ImageLinkForm","Rank","FaceRecognize","jsxDEV","_jsxDEV","App","constructor","_s","$RefreshSig$","Teszt","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","calculateFaceLocation","result","console","log","catch","error","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","imageUrl","state","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Putyi/Downloads/Tanfolyam/finalproject/finalproject/src/App.js"],"sourcesContent":["import React, {Component, useEffect} from 'react';\nimport './App.css';\nimport Part from './component/particles/particles';\nimport Navigation from './component/navigation/navigation';\nimport Logo from './component/logo/logo';\nimport ImageLinkForm from './component/imagelinkform/imagelinkform';\nimport Rank from './component/rank/rank';\nimport FaceRecognize from './component/facerecognize/facerecognize';\n\n//import Teszt from './component/teszt/teszt';\n\n/*const PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\n\nconst USER_ID = 'chrissmith';       \nconst APP_ID = 'test';\n\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n\n//const IMAGE_URL = `{this.state.imageUrl}`;\n\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n\nconst raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                }\n            }\n        }\n    ]\n});\n \nconst requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.text())\n    //.then(response => this.calculateFaceLocation(response))\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error))*/\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n            imageUrl: '',\n            box: {}\n        }\n\n    }\n\n    Teszt = ( ) => {\n        const PAT = 'e3e2e57c46984160bfd4a496e0abe5ec';\n    \n    const USER_ID = 'chrissmith';       \n    const APP_ID = 'test';\n    \n    const MODEL_ID = 'face-detection';\n    const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n    \n    const IMAGE_URL = `{imageUrl}`;\n    \n    //const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n    useEffect(() => {\n    \n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n    \n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n            }, []);\n    return(\n        \n        fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(response => this.calculateFaceLocation(response))\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error))\n        \n    );\n    }\n\n    calculateFaceLocation = (data) => {\n     const clarifaiFace = data.response.outputs[0].data.regions[0].region_info.bounding_box;\n     const image = document.getElementById('inputimage');\n     const width = Number(image.width);\n     const height = Number(image.height);\n     console.log(width, height);\n     return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n     }   \n    }\n\n    displayFaceBox = (box) => {\n        this.setState({box: box});\n    }\n\n    onInputChange = (event) => {\n        this.setState({input: event.target.value});\n    }\n\n    onButtonSubmit = () => {\n        this.setState({imageUrl: this.state.input});\n        \n    }\n\n    render() {\n    return (\n      <div className=\"App\">\n      <Part />\n      <Navigation />\n      <Logo />\n      <Rank />\n      <ImageLinkForm \n      onInputChange={this.onInputChange} \n      onButtonSubmit={this.onButtonSubmit} />\n      \n      <FaceRecognize imageUrl={this.state.imageUrl} />\n      \n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}